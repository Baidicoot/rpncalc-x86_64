(# library list #)
(# include list #)
(# include bool #)
(# include arith #)

(export <$>; list fn ->
    []
    '(-> list \
        (xs x -> '(->xs 'fn <$>) x fn :))
    list []? ?:)

(export !!; list index ->
    list \ (xs x ->
        x
        '(->xs index 1 - !!)
        index 0 == ?:))

(export <+; list acc fn ->
    acc
    '(-> list \
        (xs x -> xs x acc fn 'fn <+))
    list []? ?:)

(export +>; list acc fn ->
    acc
    '(-> list \
        (xs x -> xs acc 'fn +> x fn))
    list []? ?:)

(export sum; 0 '+ '<+)

(export prod; 0 '* '<+)

(export repeat; x ->
    '(->x repeat) x :)

(export take; list n ->
    []
    '(->list \
        (xs x -> xs n -- take x :))
    n 0 == ?:)

(export range; x y ->
    []
    '(->x ++ y range) x :
    x y == ?:)

(export filter; list fn ->
    []
    '(-> list \ (xs x -> '(->xs 'fn filter) '(->x ':) 'x fn doIf))
    list []? ?:)

(export v; !!)

(export map; <$>)